        # light
        sphereLight = UsdLux.SphereLight.Define(self._stage, Sdf.Path("/World/SphereLight"))
        sphereLight.CreateRadiusAttr(150)
        sphereLight.CreateIntensityAttr(30000)
        sphereLight.AddTranslateOp().Set(Gf.Vec3f(6.500, 0.0, 11.500))

        sphereLight = UsdLux.SphereLight.Define(get_current_stage(), Sdf.Path("/World/SphereLight"))
        sphereLight.CreateRadiusAttr(2)
        sphereLight.CreateIntensityAttr(100000)
        XFormPrim(sphereLight.GetPath().pathString).set_world_pose([6.5, 0, 12])

        light_prim = UsdLux.DistantLight.Define(self._stage, Sdf.Path("/World/defaultLight"))
        light_prim.CreateIntensityAttr(500)
        
        distantLight = UsdLux.DistantLight.Define(stage, Sdf.Path("/DistantLight"))
        distantLight.CreateIntensityAttr(500)
        distantLight.AddRotateXYZOp().Set((-36, 36, 0))

        distantLight = UsdLux.DistantLight.Define(stage, Sdf.Path("/DistantLight"))
        distantLight.CreateIntensityAttr(300)
        light_pose = Transform(r=Float4(-0.383, 0, 0, 0.924))
        set_pose(distantLight, light_pose)

        self._stage = omni.usd.get_context().get_stage()

        sphereLight = UsdLux.SphereLight.Define(self._stage, Sdf.Path("/World/SphereLight"))
        sphereLight.CreateRadiusAttr(150)
        sphereLight.CreateIntensityAttr(30000)
        sphereLight.AddTranslateOp().Set(Gf.Vec3f(650.0, 0.0, 1150.0))

==============================================================================================


        #make cube
        result, path = omni.kit.commands.execute("CreateMeshPrimCommand", prim_type="Cube")
        # Get the prim
        cube_prim = stage.GetPrimAtPath(path)
        
        xform = UsdGeom.Xformable(cube_prim)
        transform = xform.AddTransformOp()
        mat = Gf.Matrix4d()
        xform.AddTranslateOp().Set(Gf.Vec3d(0.0, 0.0, 1.0))
        mat.SetRotateOnly(Gf.Rotation(Gf.Vec3d(0,0,0), 290))  
        xform.AddScaleOp().Set(Gf.Vec3f(0.5, 0.5, 0.5))
        transform.Set(mat)
        
        simulation_resolution = 10

        # Apply PhysxDeformableBodyAPI and PhysxCollisionAPI to skin mesh and set parameter to default values
        success = deformableUtils.add_physx_deformable_body(
            stage,
            xform.GetPath(),
            collision_simplification=True,
            simulation_hexahedral_resolution=simulation_resolution,
            self_collision=False,
        )

        # Create a deformable body material and set it on the deformable body
        deformable_material_path = omni.usd.get_stage_next_free_path(stage, "Cube", True)
        deformableUtils.add_deformable_body_material(
            stage,
            deformable_material_path,
            youngs_modulus=10000.0,
            poissons_ratio=0.49,
            damping_scale=0.0,
            dynamic_friction=0.5,
        )
        physicsUtils.add_physics_material_to_prim(stage, xform.GetPrim(), deformable_material_path)       
    

        # Deformable
        self.deformable_material = DeformableMaterial(
            prim_path="/deformableMaterial",
            dynamic_friction=0.5,
            youngs_modulus=5e4,
            poissons_ratio=0.4,
            damping_scale=0.1,
            elasticity_damping=0.1,
        )
        self.my_world.scene.add(self.deformable_material)

    # Create a cube, set physics to False to make it static with collision only
    async def add_cube(self, path, size, offset, physics=True):

        cubeGeom = UsdGeom.Cube.Define(self._stage, path)
        cubePrim = self._stage.GetPrimAtPath(path)
        cubeGeom.CreateSizeAttr(size)
        cubeGeom.AddTranslateOp().Set(offset)
        await omni.kit.app.get_app().next_update_async()  # Need this to avoid flatcache errors
        if physics:
            rigid_api = UsdPhysics.RigidBodyAPI.Apply(cubePrim)
            rigid_api.CreateRigidBodyEnabledAttr(True)
        UsdPhysics.CollisionAPI.Apply(cubePrim)

        return cubePrim

        def add_physics_material_to_prim(stage, prim, materialPath):
            bindingAPI = UsdShade.MaterialBindingAPI.Apply(prim)
            materialPrim = UsdShade.Material(stage.GetPrimAtPath(materialPath))
            bindingAPI.Bind(materialPrim, UsdShade.Tokens.weakerThanDescendants, "physics")

        add_physics_material_to_prim(stage, cube0, uss_material_path)
        add_physics_material_to_prim(stage, cube1, uss_material_path)

        stage = omni.usd.get_context().get_stage()

        cube0 = await self.add_cube("/World/Cube0", 0.250, Gf.Vec3f(0.0, 1.000, 0.0), physics=False)
        cube1 = await self.add_cube("/World/Cube2", 0.250, Gf.Vec3f(0.800, 0.0, 0.0), physics=False)

        # Create a cube, set physics to False to make it static with collision only
        async def add_cube(self, path, size, offset, physics=True):

                cubeGeom = UsdGeom.Cube.Define(self._stage, path)
                cubePrim = self._stage.GetPrimAtPath(path)
                cubeGeom.CreateSizeAttr(size)
                cubeGeom.AddTranslateOp().Set(offset)
                await omni.kit.app.get_app().next_update_async()  # Need this to avoid flatcache errors
                if physics:
                rigid_api = UsdPhysics.RigidBodyAPI.Apply(cubePrim)
                rigid_api.CreateRigidBodyEnabledAttr(True)
                UsdPhysics.CollisionAPI.Apply(cubePrim)

                return cubePrim

        # Create Cube.
        pathName = '/World/cube'
        cubeGeom = UsdGeom.Cube.Define(stage, pathName)

        # Set radius.
        cubeGeom.CreateSizeAttr(0.1)

        # Set color.
        cubeGeom.CreateDisplayColorAttr([(1.0, 0.0, 0.0)])

        # Set position.
        UsdGeom.XformCommonAPI(cubeGeom).SetTranslate((0.0, 0.0, 0.5))

        objPrim = stage.GetPrimAtPath(pathName)
        UsdPhysics.RigidBodyAPI.Apply(objPrim)
        UsdPhysics.CollisionAPI.Apply(objPrim)

        # # Deformable Case 2
        # self.deformable_material = DeformableMaterial(
        #     prim_path="/deformableMaterial",
        #     youngs_modulus=5e4,
        #     poissons_ratio=0.4,
        #     dynamic_friction=0.5,
        #     damping_scale=0.1,
        #     elasticity_damping=0.1,
        # )
        # world.scene.add(self.deformable_material)